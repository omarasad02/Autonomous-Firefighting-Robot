;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/5/2024 4:25:54 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x29A6      	GOTO       422
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00AE      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00AF      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A2      	MOVWF      34
0x000D	0x0871      	MOVF       R1, 0
0x000E	0x00A1      	MOVWF      33
0x000F	0x0872      	MOVF       R2, 0
0x0010	0x00A0      	MOVWF      32
;qq.c,92 :: 		void interrupt(){
;qq.c,93 :: 		if(INTCON & 0x04){// TMR0 Overflow interrupt, will get here every 1ms
0x0011	0x1D0B      	BTFSS      INTCON, 2
0x0012	0x281D      	GOTO       L_interrupt3
;qq.c,94 :: 		TMR0=248;
0x0013	0x30F8      	MOVLW      248
0x0014	0x0081      	MOVWF      TMR0
;qq.c,95 :: 		cnt++;
0x0015	0x0AAB      	INCF       _cnt, 1
0x0016	0x1903      	BTFSC      STATUS, 2
0x0017	0x0AAC      	INCF       _cnt+1, 1
;qq.c,96 :: 		cnt1++;
0x0018	0x0AA7      	INCF       _cnt1, 1
0x0019	0x1903      	BTFSC      STATUS, 2
0x001A	0x0AA8      	INCF       _cnt1+1, 1
;qq.c,97 :: 		INTCON = INTCON & 0xFB;//Clear T0IF
0x001B	0x30FB      	MOVLW      251
0x001C	0x058B      	ANDWF      INTCON, 1
;qq.c,98 :: 		}
L_interrupt3:
;qq.c,99 :: 		if(PIR1&0x04){//CCP1 interrupt
0x001D	0x1D0C      	BTFSS      PIR1, 2
0x001E	0x2846      	GOTO       L_interrupt4
;qq.c,100 :: 		if(Hi_Lo_flag){ //high
0x001F	0x082D      	MOVF       _Hi_Lo_flag, 0
0x0020	0x1903      	BTFSC      STATUS, 2
0x0021	0x282F      	GOTO       L_interrupt5
;qq.c,101 :: 		CCPR1H= angle >>8;
0x0022	0x0826      	MOVF       _angle+1, 0
0x0023	0x00F0      	MOVWF      R0
0x0024	0x01F1      	CLRF       R0+1
0x0025	0x0870      	MOVF       R0, 0
0x0026	0x0096      	MOVWF      CCPR1H
;qq.c,102 :: 		CCPR1L= angle;
0x0027	0x0825      	MOVF       _angle, 0
0x0028	0x0095      	MOVWF      CCPR1L
;qq.c,103 :: 		Hi_Lo_flag=0;//next time low
0x0029	0x01AD      	CLRF       _Hi_Lo_flag
;qq.c,104 :: 		CCP1CON=0x09;//next time Falling edge
0x002A	0x3009      	MOVLW      9
0x002B	0x0097      	MOVWF      CCP1CON
;qq.c,105 :: 		TMR1H=0;
0x002C	0x018F      	CLRF       TMR1H
;qq.c,106 :: 		TMR1L=0;
0x002D	0x018E      	CLRF       TMR1L
;qq.c,107 :: 		}
0x002E	0x2844      	GOTO       L_interrupt6
L_interrupt5:
;qq.c,109 :: 		CCPR1H= (40000 - angle) >>8;
0x002F	0x0825      	MOVF       _angle, 0
0x0030	0x3C40      	SUBLW      64
0x0031	0x00F3      	MOVWF      R3
0x0032	0x0826      	MOVF       _angle+1, 0
0x0033	0x1C03      	BTFSS      STATUS, 0
0x0034	0x3E01      	ADDLW      1
0x0035	0x3C9C      	SUBLW      156
0x0036	0x00F4      	MOVWF      R3+1
0x0037	0x0874      	MOVF       R3+1, 0
0x0038	0x00F0      	MOVWF      R0
0x0039	0x01F1      	CLRF       R0+1
0x003A	0x0870      	MOVF       R0, 0
0x003B	0x0096      	MOVWF      CCPR1H
;qq.c,110 :: 		CCPR1L= (40000 - angle);
0x003C	0x0873      	MOVF       R3, 0
0x003D	0x0095      	MOVWF      CCPR1L
;qq.c,111 :: 		CCP1CON=0x08; //next time rising edge
0x003E	0x3008      	MOVLW      8
0x003F	0x0097      	MOVWF      CCP1CON
;qq.c,112 :: 		Hi_Lo_flag=1; //next time High
0x0040	0x3001      	MOVLW      1
0x0041	0x00AD      	MOVWF      _Hi_Lo_flag
;qq.c,113 :: 		TMR1H=0;
0x0042	0x018F      	CLRF       TMR1H
;qq.c,114 :: 		TMR1L=0;
0x0043	0x018E      	CLRF       TMR1L
;qq.c,116 :: 		}
L_interrupt6:
;qq.c,118 :: 		PIR1=PIR1&0xFB;
0x0044	0x30FB      	MOVLW      251
0x0045	0x058C      	ANDWF      PIR1, 1
;qq.c,119 :: 		}
L_interrupt4:
;qq.c,120 :: 		if(PIR1&0x01){//TMR1 ovwerflow
0x0046	0x1C0C      	BTFSS      PIR1, 0
0x0047	0x284A      	GOTO       L_interrupt7
;qq.c,122 :: 		PIR1=PIR1&0xFE;
0x0048	0x30FE      	MOVLW      254
0x0049	0x058C      	ANDWF      PIR1, 1
;qq.c,123 :: 		}
L_interrupt7:
;qq.c,124 :: 		}
L_end_interrupt:
L__interrupt37:
0x004A	0x0822      	MOVF       34, 0
0x004B	0x00F0      	MOVWF      R0
0x004C	0x0821      	MOVF       33, 0
0x004D	0x00F1      	MOVWF      R1
0x004E	0x0820      	MOVF       32, 0
0x004F	0x00F2      	MOVWF      R2
0x0050	0x082F      	MOVF       ___savePCLATH, 0
0x0051	0x008A      	MOVWF      PCLATH
0x0052	0x0E2E      	SWAPF      ___saveSTATUS, 0
0x0053	0x0083      	MOVWF      STATUS
0x0054	0x0EFF      	SWAPF      R15, 1
0x0055	0x0E7F      	SWAPF      R15, 0
0x0056	0x0009      	RETFIE
; end of _interrupt
_stop:
;qq.c,210 :: 		void stop(){
;qq.c,211 :: 		PORTC = PORTC & 0b00001111;
0x0057	0x300F      	MOVLW      15
0x0058	0x1283      	BCF        STATUS, 5
0x0059	0x1303      	BCF        STATUS, 6
0x005A	0x0587      	ANDWF      PORTC, 1
;qq.c,212 :: 		}
L_end_stop:
0x005B	0x0008      	RETURN
; end of _stop
_my_delay:
;qq.c,136 :: 		void my_delay(int const x){
;qq.c,137 :: 		cnt=0;
0x005C	0x1283      	BCF        STATUS, 5
0x005D	0x1303      	BCF        STATUS, 6
0x005E	0x01AB      	CLRF       _cnt
0x005F	0x01AC      	CLRF       _cnt+1
;qq.c,138 :: 		while(cnt<x);
L_my_delay10:
0x0060	0x3080      	MOVLW      128
0x0061	0x062C      	XORWF      _cnt+1, 0
0x0062	0x00F0      	MOVWF      R0
0x0063	0x3080      	MOVLW      128
0x0064	0x0631      	XORWF      FARG_my_delay_x+1, 0
0x0065	0x0270      	SUBWF      R0, 0
0x0066	0x1D03      	BTFSS      STATUS, 2
0x0067	0x286A      	GOTO       L__my_delay40
0x0068	0x0830      	MOVF       FARG_my_delay_x, 0
0x0069	0x022B      	SUBWF      _cnt, 0
L__my_delay40:
0x006A	0x1803      	BTFSC      STATUS, 0
0x006B	0x286D      	GOTO       L_my_delay11
0x006C	0x2860      	GOTO       L_my_delay10
L_my_delay11:
;qq.c,140 :: 		}
L_end_my_delay:
0x006D	0x0008      	RETURN
; end of _my_delay
_backward:
;qq.c,224 :: 		void backward(){
;qq.c,225 :: 		PORTC = (PORTC & 0b00001111)| 0b01010000;
0x006E	0x300F      	MOVLW      15
0x006F	0x1283      	BCF        STATUS, 5
0x0070	0x1303      	BCF        STATUS, 6
0x0071	0x0507      	ANDWF      PORTC, 0
0x0072	0x00F0      	MOVWF      R0
0x0073	0x3050      	MOVLW      80
0x0074	0x0470      	IORWF      R0, 0
0x0075	0x0087      	MOVWF      PORTC
;qq.c,227 :: 		my_delay(3);
0x0076	0x3003      	MOVLW      3
0x0077	0x00B0      	MOVWF      FARG_my_delay_x
0x0078	0x3000      	MOVLW      0
0x0079	0x00B1      	MOVWF      FARG_my_delay_x+1
0x007A	0x205C      	CALL       _my_delay
;qq.c,228 :: 		stop();
0x007B	0x2057      	CALL       _stop
;qq.c,229 :: 		my_delay(3);
0x007C	0x3003      	MOVLW      3
0x007D	0x00B0      	MOVWF      FARG_my_delay_x
0x007E	0x3000      	MOVLW      0
0x007F	0x00B1      	MOVWF      FARG_my_delay_x+1
0x0080	0x205C      	CALL       _my_delay
;qq.c,230 :: 		}
L_end_backward:
0x0081	0x0008      	RETURN
; end of _backward
_forward:
;qq.c,215 :: 		void forward(){
;qq.c,216 :: 		PORTC = (PORTC & 0b00001111)| 0b10100000;
0x0082	0x300F      	MOVLW      15
0x0083	0x1283      	BCF        STATUS, 5
0x0084	0x1303      	BCF        STATUS, 6
0x0085	0x0507      	ANDWF      PORTC, 0
0x0086	0x00F0      	MOVWF      R0
0x0087	0x30A0      	MOVLW      160
0x0088	0x0470      	IORWF      R0, 0
0x0089	0x0087      	MOVWF      PORTC
;qq.c,218 :: 		my_delay(3);
0x008A	0x3003      	MOVLW      3
0x008B	0x00B0      	MOVWF      FARG_my_delay_x
0x008C	0x3000      	MOVLW      0
0x008D	0x00B1      	MOVWF      FARG_my_delay_x+1
0x008E	0x205C      	CALL       _my_delay
;qq.c,219 :: 		stop();
0x008F	0x2057      	CALL       _stop
;qq.c,220 :: 		my_delay(3);
0x0090	0x3003      	MOVLW      3
0x0091	0x00B0      	MOVWF      FARG_my_delay_x
0x0092	0x3000      	MOVLW      0
0x0093	0x00B1      	MOVWF      FARG_my_delay_x+1
0x0094	0x205C      	CALL       _my_delay
;qq.c,222 :: 		}
L_end_forward:
0x0095	0x0008      	RETURN
; end of _forward
_read_ATD_A0:
;qq.c,129 :: 		unsigned int read_ATD_A0(){
;qq.c,130 :: 		ADCON0 = ADCON0 | 0x04; // GO
0x0096	0x1283      	BCF        STATUS, 5
0x0097	0x1303      	BCF        STATUS, 6
0x0098	0x151F      	BSF        ADCON0, 2
;qq.c,131 :: 		while(ADCON0 & 0x04);
L_read_ATD_A08:
0x0099	0x1D1F      	BTFSS      ADCON0, 2
0x009A	0x289C      	GOTO       L_read_ATD_A09
0x009B	0x2899      	GOTO       L_read_ATD_A08
L_read_ATD_A09:
;qq.c,132 :: 		return ((ADRESH<<8) | ADRESL);
0x009C	0x081E      	MOVF       ADRESH, 0
0x009D	0x00F1      	MOVWF      R0+1
0x009E	0x01F0      	CLRF       R0
0x009F	0x1683      	BSF        STATUS, 5
0x00A0	0x081E      	MOVF       ADRESL, 0
0x00A1	0x04F0      	IORWF      R0, 1
0x00A2	0x3000      	MOVLW      0
0x00A3	0x04F1      	IORWF      R0+1, 1
;qq.c,133 :: 		}
L_end_read_ATD_A0:
0x00A4	0x0008      	RETURN
; end of _read_ATD_A0
_right:
;qq.c,190 :: 		void right(){
;qq.c,191 :: 		PORTC = (PORTC & 0b00001111) | 0b10010000;
0x00A5	0x300F      	MOVLW      15
0x00A6	0x1283      	BCF        STATUS, 5
0x00A7	0x1303      	BCF        STATUS, 6
0x00A8	0x0507      	ANDWF      PORTC, 0
0x00A9	0x00F0      	MOVWF      R0
0x00AA	0x3090      	MOVLW      144
0x00AB	0x0470      	IORWF      R0, 0
0x00AC	0x0087      	MOVWF      PORTC
;qq.c,193 :: 		my_delay(4);
0x00AD	0x3004      	MOVLW      4
0x00AE	0x00B0      	MOVWF      FARG_my_delay_x
0x00AF	0x3000      	MOVLW      0
0x00B0	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00B1	0x205C      	CALL       _my_delay
;qq.c,194 :: 		stop();
0x00B2	0x2057      	CALL       _stop
;qq.c,195 :: 		my_delay(4);
0x00B3	0x3004      	MOVLW      4
0x00B4	0x00B0      	MOVWF      FARG_my_delay_x
0x00B5	0x3000      	MOVLW      0
0x00B6	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00B7	0x205C      	CALL       _my_delay
;qq.c,197 :: 		}
L_end_right:
0x00B8	0x0008      	RETURN
; end of _right
_left:
;qq.c,200 :: 		void left(){
;qq.c,201 :: 		PORTC = (PORTC & 0b00001111)| 0b01100000;
0x00B9	0x300F      	MOVLW      15
0x00BA	0x1283      	BCF        STATUS, 5
0x00BB	0x1303      	BCF        STATUS, 6
0x00BC	0x0507      	ANDWF      PORTC, 0
0x00BD	0x00F0      	MOVWF      R0
0x00BE	0x3060      	MOVLW      96
0x00BF	0x0470      	IORWF      R0, 0
0x00C0	0x0087      	MOVWF      PORTC
;qq.c,203 :: 		my_delay(4);
0x00C1	0x3004      	MOVLW      4
0x00C2	0x00B0      	MOVWF      FARG_my_delay_x
0x00C3	0x3000      	MOVLW      0
0x00C4	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00C5	0x205C      	CALL       _my_delay
;qq.c,204 :: 		stop();
0x00C6	0x2057      	CALL       _stop
;qq.c,205 :: 		my_delay(4);
0x00C7	0x3004      	MOVLW      4
0x00C8	0x00B0      	MOVWF      FARG_my_delay_x
0x00C9	0x3000      	MOVLW      0
0x00CA	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00CB	0x205C      	CALL       _my_delay
;qq.c,207 :: 		}
L_end_left:
0x00CC	0x0008      	RETURN
; end of _left
_check_fire:
;qq.c,243 :: 		void check_fire(){
;qq.c,246 :: 		sensor_voltage = read_ATD_A0();
0x00CD	0x2096      	CALL       _read_ATD_A0
0x00CE	0x0870      	MOVF       R0, 0
0x00CF	0x1283      	BCF        STATUS, 5
0x00D0	0x00A3      	MOVWF      _sensor_voltage
0x00D1	0x0871      	MOVF       R0+1, 0
0x00D2	0x00A4      	MOVWF      _sensor_voltage+1
;qq.c,247 :: 		while (PORTD & 0b10000000)
L_check_fire27:
0x00D3	0x1F88      	BTFSS      PORTD, 7
0x00D4	0x2907      	GOTO       L_check_fire28
;qq.c,249 :: 		if(sensor_voltage < 100 || sensor_voltage > 950) break;
0x00D5	0x3000      	MOVLW      0
0x00D6	0x0224      	SUBWF      _sensor_voltage+1, 0
0x00D7	0x1D03      	BTFSS      STATUS, 2
0x00D8	0x28DB      	GOTO       L__check_fire56
0x00D9	0x3064      	MOVLW      100
0x00DA	0x0223      	SUBWF      _sensor_voltage, 0
L__check_fire56:
0x00DB	0x1C03      	BTFSS      STATUS, 0
0x00DC	0x28E6      	GOTO       L__check_fire33
0x00DD	0x0824      	MOVF       _sensor_voltage+1, 0
0x00DE	0x3C03      	SUBLW      3
0x00DF	0x1D03      	BTFSS      STATUS, 2
0x00E0	0x28E3      	GOTO       L__check_fire57
0x00E1	0x0823      	MOVF       _sensor_voltage, 0
0x00E2	0x3CB6      	SUBLW      182
L__check_fire57:
0x00E3	0x1C03      	BTFSS      STATUS, 0
0x00E4	0x28E6      	GOTO       L__check_fire33
0x00E5	0x28E7      	GOTO       L_check_fire31
L__check_fire33:
0x00E6	0x2907      	GOTO       L_check_fire28
L_check_fire31:
;qq.c,252 :: 		PORTD = PORTD | 0b00000010;
0x00E7	0x1488      	BSF        PORTD, 1
;qq.c,253 :: 		my_delay(3000);
0x00E8	0x30B8      	MOVLW      184
0x00E9	0x00B0      	MOVWF      FARG_my_delay_x
0x00EA	0x300B      	MOVLW      11
0x00EB	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00EC	0x205C      	CALL       _my_delay
;qq.c,254 :: 		PORTD = PORTD & 0b11111101;
0x00ED	0x30FD      	MOVLW      253
0x00EE	0x0588      	ANDWF      PORTD, 1
;qq.c,255 :: 		my_delay(3000);
0x00EF	0x30B8      	MOVLW      184
0x00F0	0x00B0      	MOVWF      FARG_my_delay_x
0x00F1	0x300B      	MOVLW      11
0x00F2	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00F3	0x205C      	CALL       _my_delay
;qq.c,258 :: 		angle=3500;
0x00F4	0x30AC      	MOVLW      172
0x00F5	0x00A5      	MOVWF      _angle
0x00F6	0x300D      	MOVLW      13
0x00F7	0x00A6      	MOVWF      _angle+1
;qq.c,259 :: 		my_delay(1500);
0x00F8	0x30DC      	MOVLW      220
0x00F9	0x00B0      	MOVWF      FARG_my_delay_x
0x00FA	0x3005      	MOVLW      5
0x00FB	0x00B1      	MOVWF      FARG_my_delay_x+1
0x00FC	0x205C      	CALL       _my_delay
;qq.c,260 :: 		angle=1000;
0x00FD	0x30E8      	MOVLW      232
0x00FE	0x00A5      	MOVWF      _angle
0x00FF	0x3003      	MOVLW      3
0x0100	0x00A6      	MOVWF      _angle+1
;qq.c,261 :: 		my_delay(1500);
0x0101	0x30DC      	MOVLW      220
0x0102	0x00B0      	MOVWF      FARG_my_delay_x
0x0103	0x3005      	MOVLW      5
0x0104	0x00B1      	MOVWF      FARG_my_delay_x+1
0x0105	0x205C      	CALL       _my_delay
;qq.c,262 :: 		}
0x0106	0x28D3      	GOTO       L_check_fire27
L_check_fire28:
;qq.c,264 :: 		PORTD = PORTD & 0b11111101;
0x0107	0x30FD      	MOVLW      253
0x0108	0x0588      	ANDWF      PORTD, 1
;qq.c,265 :: 		angle =  2250;
0x0109	0x30CA      	MOVLW      202
0x010A	0x00A5      	MOVWF      _angle
0x010B	0x3008      	MOVLW      8
0x010C	0x00A6      	MOVWF      _angle+1
;qq.c,266 :: 		}
L_end_check_fire:
0x010D	0x0008      	RETURN
; end of _check_fire
_check_left:
;qq.c,172 :: 		void check_left(){
;qq.c,174 :: 		if (PORTD & 0b00100000){
0x010E	0x1283      	BCF        STATUS, 5
0x010F	0x1303      	BCF        STATUS, 6
0x0110	0x1E88      	BTFSS      PORTD, 5
0x0111	0x2926      	GOTO       L_check_left21
;qq.c,175 :: 		cnt1 = 0;
0x0112	0x01A7      	CLRF       _cnt1
0x0113	0x01A8      	CLRF       _cnt1+1
;qq.c,177 :: 		while(!(PORTD & 0b10000000)){
L_check_left22:
0x0114	0x1B88      	BTFSC      PORTD, 7
0x0115	0x2925      	GOTO       L_check_left23
;qq.c,178 :: 		if (cnt1 >= 5000) break;
0x0116	0x3080      	MOVLW      128
0x0117	0x0628      	XORWF      _cnt1+1, 0
0x0118	0x00F0      	MOVWF      R0
0x0119	0x3080      	MOVLW      128
0x011A	0x3A13      	XORLW      19
0x011B	0x0270      	SUBWF      R0, 0
0x011C	0x1D03      	BTFSS      STATUS, 2
0x011D	0x2920      	GOTO       L__check_left47
0x011E	0x3088      	MOVLW      136
0x011F	0x0227      	SUBWF      _cnt1, 0
L__check_left47:
0x0120	0x1C03      	BTFSS      STATUS, 0
0x0121	0x2923      	GOTO       L_check_left24
0x0122	0x2925      	GOTO       L_check_left23
L_check_left24:
;qq.c,179 :: 		left();
0x0123	0x20B9      	CALL       _left
;qq.c,180 :: 		}
0x0124	0x2914      	GOTO       L_check_left22
L_check_left23:
;qq.c,182 :: 		stop();
0x0125	0x2057      	CALL       _stop
;qq.c,183 :: 		}
L_check_left21:
;qq.c,184 :: 		}
L_end_check_left:
0x0126	0x0008      	RETURN
; end of _check_left
_check_front_obstacle:
;qq.c,158 :: 		void check_front_obstacle(){
;qq.c,159 :: 		sensor_voltage = read_ATD_A0();
0x0127	0x2096      	CALL       _read_ATD_A0
0x0128	0x0870      	MOVF       R0, 0
0x0129	0x1283      	BCF        STATUS, 5
0x012A	0x00A3      	MOVWF      _sensor_voltage
0x012B	0x0871      	MOVF       R0+1, 0
0x012C	0x00A4      	MOVWF      _sensor_voltage+1
;qq.c,162 :: 		while(sensor_voltage >= 100 && sensor_voltage <= 990){
L_check_front_obstacle16:
0x012D	0x3000      	MOVLW      0
0x012E	0x0224      	SUBWF      _sensor_voltage+1, 0
0x012F	0x1D03      	BTFSS      STATUS, 2
0x0130	0x2933      	GOTO       L__check_front_obstacle44
0x0131	0x3064      	MOVLW      100
0x0132	0x0223      	SUBWF      _sensor_voltage, 0
L__check_front_obstacle44:
0x0133	0x1C03      	BTFSS      STATUS, 0
0x0134	0x2948      	GOTO       L_check_front_obstacle17
0x0135	0x0824      	MOVF       _sensor_voltage+1, 0
0x0136	0x3C03      	SUBLW      3
0x0137	0x1D03      	BTFSS      STATUS, 2
0x0138	0x293B      	GOTO       L__check_front_obstacle45
0x0139	0x0823      	MOVF       _sensor_voltage, 0
0x013A	0x3CDE      	SUBLW      222
L__check_front_obstacle45:
0x013B	0x1C03      	BTFSS      STATUS, 0
0x013C	0x2948      	GOTO       L_check_front_obstacle17
L__check_front_obstacle32:
;qq.c,164 :: 		if(!(PORTB & 0b01000000))
0x013D	0x1B06      	BTFSC      PORTB, 6
0x013E	0x2940      	GOTO       L_check_front_obstacle20
;qq.c,165 :: 		break;
0x013F	0x2948      	GOTO       L_check_front_obstacle17
L_check_front_obstacle20:
;qq.c,166 :: 		sensor_voltage = read_ATD_A0();
0x0140	0x2096      	CALL       _read_ATD_A0
0x0141	0x0870      	MOVF       R0, 0
0x0142	0x1283      	BCF        STATUS, 5
0x0143	0x00A3      	MOVWF      _sensor_voltage
0x0144	0x0871      	MOVF       R0+1, 0
0x0145	0x00A4      	MOVWF      _sensor_voltage+1
;qq.c,167 :: 		forward();
0x0146	0x2082      	CALL       _forward
;qq.c,168 :: 		}
0x0147	0x292D      	GOTO       L_check_front_obstacle16
L_check_front_obstacle17:
;qq.c,169 :: 		stop();
0x0148	0x2057      	CALL       _stop
;qq.c,170 :: 		}
L_end_check_front_obstacle:
0x0149	0x0008      	RETURN
; end of _check_front_obstacle
_init:
;qq.c,51 :: 		void init(){
;qq.c,53 :: 		TRISA = 0x01;
0x014A	0x3001      	MOVLW      1
0x014B	0x1683      	BSF        STATUS, 5
0x014C	0x1303      	BCF        STATUS, 6
0x014D	0x0085      	MOVWF      TRISA
;qq.c,54 :: 		TRISB = 0b01000000;
0x014E	0x3040      	MOVLW      64
0x014F	0x0086      	MOVWF      TRISB
;qq.c,55 :: 		TRISC = 0x00;
0x0150	0x0187      	CLRF       TRISC
;qq.c,56 :: 		TRISD = 0b11111101;
0x0151	0x30FD      	MOVLW      253
0x0152	0x0088      	MOVWF      TRISD
;qq.c,58 :: 		PORTB = 0x00;
0x0153	0x1283      	BCF        STATUS, 5
0x0154	0x0186      	CLRF       PORTB
;qq.c,59 :: 		PORTC = 0x00;
0x0155	0x0187      	CLRF       PORTC
;qq.c,60 :: 		PORTD = PORTD & 0b11111101;
0x0156	0x30FD      	MOVLW      253
0x0157	0x0588      	ANDWF      PORTD, 1
;qq.c,64 :: 		OPTION_REG= 0x87;
0x0158	0x3087      	MOVLW      135
0x0159	0x1683      	BSF        STATUS, 5
0x015A	0x0081      	MOVWF      OPTION_REG
;qq.c,65 :: 		TMR0=248;// will count 8 times before the overflow (8* 128uS = 1ms)
0x015B	0x30F8      	MOVLW      248
0x015C	0x1283      	BCF        STATUS, 5
0x015D	0x0081      	MOVWF      TMR0
;qq.c,66 :: 		INTCON = 0b11100000; //GIE and , T0IE, peripheral interrupt
0x015E	0x30E0      	MOVLW      224
0x015F	0x008B      	MOVWF      INTCON
;qq.c,68 :: 		T1CON=0x01;
0x0160	0x3001      	MOVLW      1
0x0161	0x0090      	MOVWF      T1CON
;qq.c,69 :: 		TMR1H=0;
0x0162	0x018F      	CLRF       TMR1H
;qq.c,70 :: 		TMR1L=0;
0x0163	0x018E      	CLRF       TMR1L
;qq.c,72 :: 		CCP1CON=0x08;
0x0164	0x3008      	MOVLW      8
0x0165	0x0097      	MOVWF      CCP1CON
;qq.c,73 :: 		PIE1=PIE1|0x04;// Enable CCP1 interrupts
0x0166	0x1683      	BSF        STATUS, 5
0x0167	0x150C      	BSF        PIE1, 2
;qq.c,74 :: 		CCPR1H=2000>>8;
0x0168	0x3007      	MOVLW      7
0x0169	0x1283      	BCF        STATUS, 5
0x016A	0x0096      	MOVWF      CCPR1H
;qq.c,75 :: 		CCPR1L=2000;
0x016B	0x30D0      	MOVLW      208
0x016C	0x0095      	MOVWF      CCPR1L
;qq.c,77 :: 		Hi_Lo_flag = 1;
0x016D	0x3001      	MOVLW      1
0x016E	0x00AD      	MOVWF      _Hi_Lo_flag
;qq.c,82 :: 		ADCON0 = 0x41;
0x016F	0x3041      	MOVLW      65
0x0170	0x009F      	MOVWF      ADCON0
;qq.c,83 :: 		ADCON1 = 0xCE;
0x0171	0x30CE      	MOVLW      206
0x0172	0x1683      	BSF        STATUS, 5
0x0173	0x009F      	MOVWF      ADCON1
;qq.c,86 :: 		}
L_end_init:
0x0174	0x0008      	RETURN
; end of _init
_check_right:
;qq.c,142 :: 		void check_right(){
;qq.c,144 :: 		if(PORTD & 0b00010000){
0x0175	0x1283      	BCF        STATUS, 5
0x0176	0x1303      	BCF        STATUS, 6
0x0177	0x1E08      	BTFSS      PORTD, 4
0x0178	0x298D      	GOTO       L_check_right12
;qq.c,145 :: 		cnt1 = 0;
0x0179	0x01A7      	CLRF       _cnt1
0x017A	0x01A8      	CLRF       _cnt1+1
;qq.c,147 :: 		while(!(PORTD & 0b10000000)){
L_check_right13:
0x017B	0x1B88      	BTFSC      PORTD, 7
0x017C	0x298C      	GOTO       L_check_right14
;qq.c,149 :: 		if (cnt1 >= 5000) break;
0x017D	0x3080      	MOVLW      128
0x017E	0x0628      	XORWF      _cnt1+1, 0
0x017F	0x00F0      	MOVWF      R0
0x0180	0x3080      	MOVLW      128
0x0181	0x3A13      	XORLW      19
0x0182	0x0270      	SUBWF      R0, 0
0x0183	0x1D03      	BTFSS      STATUS, 2
0x0184	0x2987      	GOTO       L__check_right42
0x0185	0x3088      	MOVLW      136
0x0186	0x0227      	SUBWF      _cnt1, 0
L__check_right42:
0x0187	0x1C03      	BTFSS      STATUS, 0
0x0188	0x298A      	GOTO       L_check_right15
0x0189	0x298C      	GOTO       L_check_right14
L_check_right15:
;qq.c,150 :: 		right();
0x018A	0x20A5      	CALL       _right
;qq.c,152 :: 		}
0x018B	0x297B      	GOTO       L_check_right13
L_check_right14:
;qq.c,154 :: 		stop();
0x018C	0x2057      	CALL       _stop
;qq.c,155 :: 		}
L_check_right12:
;qq.c,156 :: 		}
L_end_check_right:
0x018D	0x0008      	RETURN
; end of _check_right
_adjust:
;qq.c,234 :: 		void adjust(){
;qq.c,235 :: 		sensor_voltage = read_ATD_A0();
0x018E	0x2096      	CALL       _read_ATD_A0
0x018F	0x0870      	MOVF       R0, 0
0x0190	0x1283      	BCF        STATUS, 5
0x0191	0x00A3      	MOVWF      _sensor_voltage
0x0192	0x0871      	MOVF       R0+1, 0
0x0193	0x00A4      	MOVWF      _sensor_voltage+1
;qq.c,236 :: 		while(sensor_voltage < 100){
L_adjust25:
0x0194	0x3000      	MOVLW      0
0x0195	0x0224      	SUBWF      _sensor_voltage+1, 0
0x0196	0x1D03      	BTFSS      STATUS, 2
0x0197	0x299A      	GOTO       L__adjust54
0x0198	0x3064      	MOVLW      100
0x0199	0x0223      	SUBWF      _sensor_voltage, 0
L__adjust54:
0x019A	0x1803      	BTFSC      STATUS, 0
0x019B	0x29A4      	GOTO       L_adjust26
;qq.c,237 :: 		backward();
0x019C	0x206E      	CALL       _backward
;qq.c,238 :: 		sensor_voltage = read_ATD_A0();
0x019D	0x2096      	CALL       _read_ATD_A0
0x019E	0x0870      	MOVF       R0, 0
0x019F	0x1283      	BCF        STATUS, 5
0x01A0	0x00A3      	MOVWF      _sensor_voltage
0x01A1	0x0871      	MOVF       R0+1, 0
0x01A2	0x00A4      	MOVWF      _sensor_voltage+1
;qq.c,239 :: 		}
0x01A3	0x2994      	GOTO       L_adjust25
L_adjust26:
;qq.c,240 :: 		stop();
0x01A4	0x2057      	CALL       _stop
;qq.c,241 :: 		}
L_end_adjust:
0x01A5	0x0008      	RETURN
; end of _adjust
_main:
;qq.c,28 :: 		void main() {
;qq.c,29 :: 		init();
0x01A6	0x214A      	CALL       _init
;qq.c,30 :: 		while(1){
L_main0:
;qq.c,32 :: 		check_right();
0x01A7	0x2175      	CALL       _check_right
;qq.c,33 :: 		check_left();
0x01A8	0x210E      	CALL       _check_left
;qq.c,34 :: 		check_front_obstacle();
0x01A9	0x2127      	CALL       _check_front_obstacle
;qq.c,36 :: 		adjust();
0x01AA	0x218E      	CALL       _adjust
;qq.c,38 :: 		check_fire();
0x01AB	0x20CD      	CALL       _check_fire
;qq.c,39 :: 		if (PORTB & 0b10000000){
0x01AC	0x1F86      	BTFSS      PORTB, 7
0x01AD	0x29BB      	GOTO       L_main2
;qq.c,40 :: 		PORTD = PORTD | 0b00000010;
0x01AE	0x1488      	BSF        PORTD, 1
;qq.c,41 :: 		my_delay(3000);
0x01AF	0x30B8      	MOVLW      184
0x01B0	0x00B0      	MOVWF      FARG_my_delay_x
0x01B1	0x300B      	MOVLW      11
0x01B2	0x00B1      	MOVWF      FARG_my_delay_x+1
0x01B3	0x205C      	CALL       _my_delay
;qq.c,42 :: 		PORTD = PORTD & 0b11111101;
0x01B4	0x30FD      	MOVLW      253
0x01B5	0x0588      	ANDWF      PORTD, 1
;qq.c,43 :: 		my_delay(3000);
0x01B6	0x30B8      	MOVLW      184
0x01B7	0x00B0      	MOVWF      FARG_my_delay_x
0x01B8	0x300B      	MOVLW      11
0x01B9	0x00B1      	MOVWF      FARG_my_delay_x+1
0x01BA	0x205C      	CALL       _my_delay
;qq.c,45 :: 		}
L_main2:
;qq.c,46 :: 		}
0x01BB	0x29A7      	GOTO       L_main0
;qq.c,47 :: 		}
L_end_main:
0x01BC	0x29BC      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [83]    _interrupt
0x0057       [5]    _stop
0x005C      [18]    _my_delay
0x006E      [20]    _backward
0x0082      [20]    _forward
0x0096      [15]    _read_ATD_A0
0x00A5      [20]    _right
0x00B9      [20]    _left
0x00CD      [65]    _check_fire
0x010E      [25]    _check_left
0x0127      [35]    _check_front_obstacle
0x014A      [43]    _init
0x0175      [25]    _check_right
0x018E      [24]    _adjust
0x01A6      [23]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [1]    T1CON
0x0015       [1]    CCPR1L
0x0016       [1]    CCPR1H
0x0017       [1]    CCP1CON
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0023       [2]    _sensor_voltage
0x0025       [2]    _angle
0x0027       [2]    _cnt1
0x0029       [2]    ___DoICPAddr
0x002B       [2]    _cnt
0x002D       [1]    _Hi_Lo_flag
0x002E       [1]    ___saveSTATUS
0x002F       [1]    ___savePCLATH
0x0030       [2]    FARG_my_delay_x
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x008C       [1]    PIE1
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
